DROP TABLE PRODUCTO_PRECIO_VENTA;
DROP TABLE PRODUCTO_PEDIDO;
DROP TABLE PRODUCTO_LUGAR_ALMAC;
DROP TABLE VENTA;
DROP TABLE MOVIMIENTO;
DROP TABLE NOTIFICACION_BODEGA_PED;
DROP TABLE BODEGA_PEDIDO;
DROP TABLE PEDIDO;
DROP TABLE OFERTA_PROVEEDOR;
DROP TABLE LICITACION;
DROP TABLE PROVEEDOR;
DROP TABLE LOCAL;
DROP TABLE BODEGA;
DROP TABLE LUGAR_ALMACENAMIENTO;
DROP TABLE PRODUCTO;
DROP TABLE PRESENTACION;
DROP TABLE TIPO_PRODUCTO;
DROP TABLE USUARIO;

CREATE TABLE USUARIO ( -- CODIGO: US
  -- COLUMNAS:
  DIRECCION_ELECTRONICA   VARCHAR(64)  NOT NULL, -- LOGIN
  NOMBRE                  VARCHAR(128) NOT NULL,
  DOC_IDENTIFICACION      VARCHAR(64)  NOT NULL UNIQUE,
  PALABRA_CLAVE           VARCHAR(64)  NOT NULL, -- PASSWORD
  CIUDAD                  VARCHAR(64),
  DEPARTAMENTO            VARCHAR(64),
  NACIONALIDAD            VARCHAR(64),
  DIRECCION_FISICA        VARCHAR(64),
  CODIGO_POSTAL           INTEGER,
  TELEFONO                VARCHAR(64),
  ROL                     VARCHAR(64)  NOT NULL,
  TIPO                    VARCHAR(64)  NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_USUARIO PRIMARY KEY(DIRECCION_ELECTRONICA),
  CONSTRAINT CK_US_ROL CHECK (ROL='Proveedor' OR ROL='Comprador mayorista' OR ROL='Administrador de local' OR ROL='Administrador general CabAndes'),
  CONSTRAINT CK_US_TIPO CHECK (TIPO='Persona natural' OR TIPO='Empresa')
);

CREATE TABLE TIPO_PRODUCTO ( -- CODIGO: TP
  -- COLUMNAS:
  ID                      INTEGER      NOT NULL,
  NOMBRE                  VARCHAR(64)  NOT NULL UNIQUE,
  DESCRIPCION             VARCHAR(512) NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_TIPO_PRODUCTO PRIMARY KEY(ID)
);

CREATE TABLE PRESENTACION ( -- CODIGO: PE
  -- COLUMNAS:
  ID                      INTEGER      NOT NULL,
  NOMBRE                  VARCHAR(64)  NOT NULL UNIQUE,
  DESCRIPCION             VARCHAR(512) NOT NULL,
  TIPO_EMPAQUE            VARCHAR(64)  NOT NULL,
  CAPACIDAD               NUMBER(11,2) NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_PRESENTACION PRIMARY KEY(ID),
  CONSTRAINT CK_PE_TIPO_EMPAQUE CHECK (TIPO_EMPAQUE='Caja' OR TIPO_EMPAQUE='Paquete' OR TIPO_EMPAQUE='Unidad'),
  CONSTRAINT CK_PE_CAPACIDAD CHECK (CAPACIDAD>=0.00)
);

CREATE TABLE PRODUCTO ( -- CODIGO: PR
  -- COLUMNAS:
  ID                      INTEGER      NOT NULL,
  COD_TIPO_PRODUCTO       INTEGER      NOT NULL,
  NOMBRE                  VARCHAR(64)  NOT NULL UNIQUE,
  PESO                    NUMBER(11,2) NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_PRODUCTO PRIMARY KEY(ID),
  CONSTRAINT FK_PR_TIPO_PRODUCTO FOREIGN KEY(COD_TIPO_PRODUCTO) REFERENCES TIPO_PRODUCTO(ID),
  CONSTRAINT CK_PR_PESO CHECK (PESO>=0.00)
);

CREATE TABLE LUGAR_ALMACENAMIENTO ( -- CODIGO: LA
  -- COLUMNAS:
  ID                      INTEGER      NOT NULL,
  COD_TIPO_PRODUCTO       INTEGER      NOT NULL,
  NOMBRE                  VARCHAR(64)  NOT NULL UNIQUE,
  CAPACIDAD               NUMBER(11,2) NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_LUGAR_ALMACENAMIENTO PRIMARY KEY(ID),
  CONSTRAINT FK_LA_TIPO_PRODUCTO FOREIGN KEY(COD_TIPO_PRODUCTO) REFERENCES TIPO_PRODUCTO(ID),
  CONSTRAINT CK_LA_CAPACIDAD CHECK (CAPACIDAD>=0.00)
);

CREATE TABLE BODEGA ( -- CODIGO: BO
  -- COLUMNAS:
  ID                      INTEGER      NOT NULL,
  ESTADO                  VARCHAR(64)  NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_BODEGA PRIMARY KEY(ID),
  CONSTRAINT FK_BO_LUGAR_ALMACENAMIENTO FOREIGN KEY(ID) REFERENCES LUGAR_ALMACENAMIENTO(ID),
  CONSTRAINT CK_BO_ESTADO CHECK (ESTADO='En funcionamiento' OR ESTADO='En ampliacion' OR ESTADO='En mantenimiento')
);

CREATE TABLE LOCAL ( -- CODIGO: LC
  -- COLUMNAS:
  ID                      INTEGER      NOT NULL,
  COD_ADMINISTRADOR       VARCHAR(64)  NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_LOCAL PRIMARY KEY(ID),
  CONSTRAINT FK_LC_LUGAR_ALMACENAMIENTO FOREIGN KEY(ID) REFERENCES LUGAR_ALMACENAMIENTO(ID),
  CONSTRAINT FK_LC_ADMINISTRADOR FOREIGN KEY(COD_ADMINISTRADOR) REFERENCES USUARIO(DIRECCION_ELECTRONICA)
);

CREATE TABLE PROVEEDOR ( -- CODIGO: PV
  -- COLUMNAS:
  COD_USUARIO             VARCHAR(64)  NOT NULL,
  COD_TIPO_PRODUCTO       INTEGER      NOT NULL,
  CALIFICACION            NUMBER(11,2),
  -- CONSTRAINTS:
  CONSTRAINT PK_PROVEEDOR PRIMARY KEY(COD_USUARIO),
  CONSTRAINT FK_PV_USUARIO FOREIGN KEY(COD_USUARIO) REFERENCES USUARIO(DIRECCION_ELECTRONICA),
  CONSTRAINT FK_PV_TIPO_PRODUCTO FOREIGN KEY(COD_TIPO_PRODUCTO) REFERENCES TIPO_PRODUCTO(ID),
  CONSTRAINT CK_PV_CALIFICACION CHECK ((CALIFICACION IS NULL) OR (CALIFICACION>=0.00 AND CALIFICACION<=5.00))
);

CREATE TABLE LICITACION ( -- CODIGO: LI
  -- COLUMNAS:
  NUMERO                  INTEGER      NOT NULL,
  COD_PRODUCTO            INTEGER      NOT NULL,
  COD_PRESENTACION        INTEGER      NOT NULL,
  CANTIDAD_SOLICITADA     INTEGER      NOT NULL,
  CANTIDAD_RECIBIDA       INTEGER      NOT NULL,
  COD_PROVEEDOR_ELEGIDO   VARCHAR(64),
  FECHA_CREACION          DATE         NOT NULL,
  FECHA_MAXIMA_PROPUESTAS TIMESTAMP    NOT NULL,
  FECHA_ESPERADA_ENTREGA  DATE,
  FECHA_ENTREGA           DATE,
  CALIFICACION_ENTREGA    INTEGER,
  HA_SIDO_ELEGIDA         VARCHAR(2)   NOT NULL,
  HA_SIDO_SATISFECHA      VARCHAR(2)   NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_LICITACION PRIMARY KEY(NUMERO),
  CONSTRAINT FK_LI_PRODUCTO FOREIGN KEY(COD_PRODUCTO) REFERENCES PRODUCTO(ID),
  CONSTRAINT FK_LI_PRESENTACION FOREIGN KEY(COD_PRESENTACION) REFERENCES PRESENTACION(ID),
  CONSTRAINT FK_LI_PROVEEDOR_ELEGIDO FOREIGN KEY(COD_PROVEEDOR_ELEGIDO) REFERENCES PROVEEDOR(COD_USUARIO),
  CONSTRAINT CK_LI_CANTIDAD_SOLICITADA CHECK (CANTIDAD_SOLICITADA>=1),
  CONSTRAINT CK_LI_CANTIDAD_RECIBIDA CHECK (CANTIDAD_RECIBIDA=0 OR CANTIDAD_RECIBIDA>=CANTIDAD_SOLICITADA),
  CONSTRAINT CK_LI_CALIFICACION_ENTREGA CHECK ((CALIFICACION_ENTREGA IS NULL) OR (CALIFICACION_ENTREGA>=0 AND CALIFICACION_ENTREGA<=5)),
  CONSTRAINT CK_LI_HA_SIDO_ELEGIDA CHECK (HA_SIDO_ELEGIDA='Si' OR HA_SIDO_ELEGIDA='No'),
  CONSTRAINT CK_LI_HA_SIDO_SATISFECHA CHECK (HA_SIDO_SATISFECHA='Si' OR HA_SIDO_SATISFECHA='No')
);

CREATE TABLE OFERTA_PROVEEDOR ( -- CODIGO: OP
  -- COLUMNAS:
  COD_LICITACION          INTEGER      NOT NULL,
  COD_PROVEEDOR           VARCHAR(64)  NOT NULL,
  PRECIO_TOTAL_OFRECIDO   INTEGER      NOT NULL,
  PRECIO_UNITARIO         INTEGER      NOT NULL,
  CANTIDAD_PIENSA_PROVEER INTEGER      NOT NULL,
  FECHA_ESPERADA_ENTREGA  DATE         NOT NULL,
  NUMERO_LOTE             INTEGER      NOT NULL,
  FECHA_EXPIRACION_LOTE   DATE         NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_OFERTA_PROVEEDOR PRIMARY KEY(COD_LICITACION,COD_PROVEEDOR),
  CONSTRAINT FK_OP_LICITACION FOREIGN KEY(COD_LICITACION) REFERENCES LICITACION(NUMERO),
  CONSTRAINT FK_OP_PROVEEDOR FOREIGN KEY(COD_PROVEEDOR) REFERENCES PROVEEDOR(COD_USUARIO),
  CONSTRAINT CK_OP_PRECIO_TOTAL_OFRECIDO CHECK (PRECIO_TOTAL_OFRECIDO>=0),
  CONSTRAINT CK_OP_PRECIO_UNITARIO CHECK (PRECIO_UNITARIO>=0),
  CONSTRAINT CK_OP_CANTIDAD_PIENSA_PROVEER CHECK (CANTIDAD_PIENSA_PROVEER>=1)
);

CREATE TABLE PEDIDO ( -- CODIGO: PD
  -- COLUMNAS:
  NUMERO                  INTEGER      NOT NULL,
  COD_USUARIO             VARCHAR(64)  NOT NULL,
  FECHA_CREACION          DATE         NOT NULL,
  FECHA_ESPERADA_ENTREGA  DATE,
  FECHA_ENTREGA           DATE,
  PRECIO_CABANDES         INTEGER,
  HA_SIDO_CANCELADO       VARCHAR(2)   NOT NULL,
  HA_SIDO_ENTREGADO       VARCHAR(2)   NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_PEDIDO PRIMARY KEY(NUMERO),
  CONSTRAINT FK_PD_USUARIO FOREIGN KEY(COD_USUARIO) REFERENCES USUARIO(DIRECCION_ELECTRONICA),
  CONSTRAINT CK_PD_PRECIO_CABANDES CHECK ((PRECIO_CABANDES IS NULL) OR (PRECIO_CABANDES>=0)),
  CONSTRAINT CK_PD_HA_SIDO_CANCELADO CHECK (HA_SIDO_CANCELADO='Si' OR HA_SIDO_CANCELADO='No'),
  CONSTRAINT CK_PD_HA_SIDO_ENTREGADO CHECK (HA_SIDO_ENTREGADO='Si' OR HA_SIDO_ENTREGADO='No')
);

CREATE TABLE BODEGA_PEDIDO ( -- CODIGO: BP
  -- COLUMNAS:
  COD_BODEGA              INTEGER      NOT NULL,
  COD_PEDIDO              INTEGER      NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_PEDIDO_BODEGA PRIMARY KEY(COD_BODEGA,COD_PEDIDO),
  CONSTRAINT FK_BP_BODEGA FOREIGN KEY(COD_BODEGA) REFERENCES BODEGA(ID),
  CONSTRAINT FK_BP_PEDIDO FOREIGN KEY(COD_PEDIDO) REFERENCES PEDIDO(NUMERO)
);

CREATE TABLE NOTIFICACION_BODEGA_PED ( -- CODIGO: NB
  -- COLUMNAS:
  COD_BODEGA              INTEGER      NOT NULL,
  COD_PEDIDO              INTEGER      NOT NULL,
  TIPO_NOTIFICACION       VARCHAR(64)  NOT NULL,
  MENSAJE_E_MAIL          VARCHAR(512) NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_NOTIFICACION_BODEGA_PED PRIMARY KEY(COD_BODEGA,COD_PEDIDO),
  CONSTRAINT FK_NB_BODEGA FOREIGN KEY(COD_BODEGA) REFERENCES BODEGA(ID),
  CONSTRAINT FK_NB_PEDIDO FOREIGN KEY(COD_PEDIDO) REFERENCES PEDIDO(NUMERO),
  CONSTRAINT CK_NB_TIPO_NOTIFICACION CHECK (TIPO_NOTIFICACION='Cierre Bodega' OR TIPO_NOTIFICACION='Balanceo Bodega')
);

CREATE TABLE MOVIMIENTO ( -- CODIGO: MB
  -- COLUMNAS:
  NUMERO                  INTEGER      NOT NULL,
  COD_LUGAR_ORIGEN        INTEGER      NOT NULL,
  COD_LUGAR_DESTINO       INTEGER      NOT NULL,
  FECHA_MOVIMIENTO        DATE         NOT NULL,
  COD_PRODUCTO            INTEGER      NOT NULL,
  COD_PRESENTACION        INTEGER      NOT NULL,
  CANTIDAD                INTEGER      NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_MOVIMIENTO PRIMARY KEY(NUMERO),
  CONSTRAINT FK_MB_LUGAR_ORIGEN FOREIGN KEY(COD_LUGAR_ORIGEN) REFERENCES LUGAR_ALMACENAMIENTO(ID),
  CONSTRAINT FK_MB_LUGAR_DESTINO FOREIGN KEY(COD_LUGAR_DESTINO) REFERENCES LUGAR_ALMACENAMIENTO(ID),
  CONSTRAINT FK_MB_PRODUCTO FOREIGN KEY(COD_PRODUCTO) REFERENCES PRODUCTO(ID),
  CONSTRAINT FK_MB_PRESENTACION FOREIGN KEY(COD_PRESENTACION) REFERENCES PRESENTACION(ID),
  CONSTRAINT CK_MB_CANTIDAD CHECK (CANTIDAD>=1)
);

CREATE TABLE VENTA ( -- CODIGO: VE
  -- COLUMNAS:
  NUMERO                  INTEGER      NOT NULL,
  COD_LOCAL               INTEGER      NOT NULL,
  COD_PRODUCTO            INTEGER      NOT NULL,
  COD_PRESENTACION        INTEGER      NOT NULL,
  CANTIDAD                INTEGER      NOT NULL,
  FECHA                   DATE         NOT NULL,
  PRECIO                  INTEGER      NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_VENTA PRIMARY KEY(NUMERO),
  CONSTRAINT FK_VE_LOCAL FOREIGN KEY(COD_LOCAL) REFERENCES LOCAL(ID),
  CONSTRAINT FK_VE_PRODUCTO FOREIGN KEY(COD_PRODUCTO) REFERENCES PRODUCTO(ID),
  CONSTRAINT FK_VE_PRESENTACION FOREIGN KEY(COD_PRESENTACION) REFERENCES PRESENTACION(ID),
  CONSTRAINT CK_VE_CANTIDAD CHECK (CANTIDAD>=1),
  CONSTRAINT CK_VE_PRECIO CHECK (PRECIO>=0)
);

CREATE TABLE PRODUCTO_LUGAR_ALMAC ( -- CODIGO: PL
  -- COLUMNAS:
  COD_LUGAR_ALMAC         INTEGER      NOT NULL,
  COD_PRODUCTO            INTEGER      NOT NULL,
  COD_PRESENTACION        INTEGER      NOT NULL,
  CANTIDAD                INTEGER      NOT NULL,
  NUMERO_LOTE             INTEGER      NOT NULL,
  FECHA_EXPIRACION_LOTE   DATE         NOT NULL,
  PROMOCION_LOTE          NUMBER(11,2) NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_PRODUCTO_LUGAR_ALMAC PRIMARY KEY(COD_LUGAR_ALMAC,COD_PRODUCTO,COD_PRESENTACION,NUMERO_LOTE,FECHA_EXPIRACION_LOTE),
  CONSTRAINT FK_PL_LUGAR_ALMAC FOREIGN KEY(COD_LUGAR_ALMAC) REFERENCES LUGAR_ALMACENAMIENTO(ID),
  CONSTRAINT FK_PL_PRODUCTO FOREIGN KEY(COD_PRODUCTO) REFERENCES PRODUCTO(ID),
  CONSTRAINT FK_PL_PRESENTACION FOREIGN KEY(COD_PRESENTACION) REFERENCES PRESENTACION(ID),
  CONSTRAINT CK_PL_PROMOCION_LOTE CHECK (PROMOCION_LOTE>=0.00 AND PROMOCION_LOTE<=1.00)
);

CREATE TABLE PRODUCTO_PEDIDO ( -- CODIGO: PI
  -- COLUMNAS:
  COD_PEDIDO              INTEGER      NOT NULL,
  COD_PRODUCTO            INTEGER      NOT NULL,
  COD_PRESENTACION        INTEGER      NOT NULL,
  CANTIDAD_SOLICITADA     INTEGER      NOT NULL,
  CANTIDAD_ENTREGADA      INTEGER      NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_PRODUCTO_PEDIDO PRIMARY KEY(COD_PEDIDO,COD_PRODUCTO,COD_PRESENTACION),
  CONSTRAINT FK_PI_PEDIDO FOREIGN KEY(COD_PEDIDO) REFERENCES PEDIDO(NUMERO),
  CONSTRAINT FK_PI_PRODUCTO FOREIGN KEY(COD_PRODUCTO) REFERENCES PRODUCTO(ID),
  CONSTRAINT FK_PI_PRESENTACION FOREIGN KEY(COD_PRESENTACION) REFERENCES PRESENTACION(ID),
  CONSTRAINT CK_PI_CANTIDAD_SOLICITADA CHECK (CANTIDAD_SOLICITADA>=1),
  CONSTRAINT CK_PI_CANTIDAD_ENTREGADA CHECK (CANTIDAD_ENTREGADA>=0 AND CANTIDAD_ENTREGADA<=CANTIDAD_SOLICITADA)
);

CREATE TABLE PRODUCTO_PRECIO_VENTA ( -- CODIGO: VP
  -- COLUMNAS:
  COD_PRODUCTO            INTEGER      NOT NULL,
  COD_PRESENTACION        INTEGER      NOT NULL,
  PRECIO_AL_POR_MAYOR     INTEGER      NOT NULL,
  PRECIO_AL_DETAL         INTEGER      NOT NULL,
  -- CONSTRAINTS:
  CONSTRAINT PK_PRODUCTO_PRECIO_VENTA PRIMARY KEY(COD_PRODUCTO,COD_PRESENTACION),
  CONSTRAINT CK_VP_PRECIO_AL_POR_MAYOR CHECK (PRECIO_AL_POR_MAYOR>=0),
  CONSTRAINT CK_VP_PRECIO_AL_DETAL CHECK (PRECIO_AL_DETAL>=0)
);

--creacion de indices

// RF-12
CREATE INDEX INDEX_LC_COD_ADMINISTRADOR ON LOCAL(COD_ADMINISTRADOR);
CREATE INDEX INDEX_PD_COD_USUARIO ON PEDIDO(COD_USUARIO);
CREATE INDEX INDEX_PD_FECHA_CREACION ON PEDIDO(FECHA_CREACION);
CREATE INDEX INDEX_PD_FECHA_ENTREGA ON PEDIDO(FECHA_ENTREGA);

// RF-13
CREATE INDEX INDEX_PL_COD_LUGAR_ALMAC ON PRODUCTO_LUGAR_ALMAC(COD_LUGAR_ALMAC);
CREATE INDEX INDEX_PL_COD_PRESENTACION ON PRODUCTO_LUGAR_ALMAC(COD_PRESENTACION);
CREATE INDEX INDEX_LA_COD_TIPO_PRODUCTO ON LUGAR_ALMACENAMIENTO(COD_TIPO_PRODUCTO);

// RF-14, RF-15
CREATE INDEX INDEX_MB_COD_LUGAR_ORIGEN ON MOVIMIENTO(COD_LUGAR_ORIGEN);
CREATE INDEX INDEX_MB_COD_LUGAR_DESTINO ON MOVIMIENTO(COD_LUGAR_DESTINO);
CREATE INDEX INDEX_MB_FECHA_MOVIMIENTO ON MOVIMIENTO(FECHA_MOVIMIENTO);
CREATE INDEX INDEX_MB_COD_PRODUCTO ON MOVIMIENTO(COD_PRODUCTO);
CREATE INDEX INDEX_MB_COD_PRESENTACION ON MOVIMIENTO(COD_PRESENTACION);
CREATE INDEX INDEX_MB_CANTIDAD ON MOVIMIENTO(CANTIDAD);

